{"version":3,"file":"index.js","sources":["../src/account.ts","../src/utils.ts","../src/network-client.ts","../src/function-key-provider.ts","../src/record-provider.ts","../src/managed-worker.ts","../src/program-manager.ts","../src/index.ts"],"sourcesContent":["import {\n  Address,\n  PrivateKey,\n  Signature,\n  ViewKey,\n  PrivateKeyCiphertext,\n  RecordCiphertext,\n} from \"./index\";\n\ninterface AccountParam {\n  privateKey?: string;\n  seed?: Uint8Array;\n}\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality.\n *\n * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,\n * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly\n * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value\n * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public\n * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used\n * environments where the safety of the underlying key material can be assured.\n *\n * @example\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n * const signature = myRandomAccount.sign(hello_world)\n *\n * // Verify a signature\n * myRandomAccount.verify(hello_world, signature)\n */\nexport class Account {\n  _privateKey: PrivateKey;\n  _viewKey: ViewKey;\n  _address: Address;\n\n  constructor(params: AccountParam = {}) {\n    try {\n      this._privateKey = this.privateKeyFromParams(params);\n    } catch (e) {\n      console.error(\"Wrong parameter\", e);\n      throw new Error(\"Wrong Parameter\");\n    }\n    this._viewKey = ViewKey.from_private_key(this._privateKey);\n    this._address = Address.from_private_key(this._privateKey);\n  }\n\n  /**\n   * Attempts to create an account from a private key ciphertext\n   * @param {PrivateKeyCiphertext | string} ciphertext\n   * @param {string} password\n   * @returns {PrivateKey | Error}\n   *\n   * @example\n   * const ciphertext = PrivateKey.newEncrypted(\"password\");\n   * const account = Account.fromCiphertext(ciphertext, \"password\");\n   */\n  public static fromCiphertext(ciphertext: PrivateKeyCiphertext | string, password: string) {\n    try {\n      ciphertext = (typeof ciphertext === \"string\") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n      const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n      return new Account({ privateKey: _privateKey.to_string() });\n    } catch(e) {\n      throw new Error(\"Wrong password or invalid ciphertext\");\n    }\n  }\n\n  private privateKeyFromParams(params: AccountParam) {\n    if (params.seed) {\n      return PrivateKey.from_seed_unchecked(params.seed);\n    }\n    if (params.privateKey) {\n      return PrivateKey.from_string(params.privateKey);\n    }\n    return new PrivateKey();\n  }\n\n  privateKey() {\n    return this._privateKey;\n  }\n\n  viewKey() {\n    return this._viewKey;\n  }\n\n  address() {\n    return this._address;\n  }\n\n  toString() {\n    return this.address().to_string()\n  }\n\n  /**\n   * Encrypt the account's private key with a password\n   * @param {string} ciphertext\n   * @returns {PrivateKeyCiphertext}\n   *\n   * @example\n   * const account = new Account();\n   * const ciphertext = account.encryptAccount(\"password\");\n   */\n  encryptAccount(password: string) {\n    return this._privateKey.toCiphertext(password);\n  }\n\n  /**\n   * Decrypts a Record in ciphertext form into plaintext\n   * @param {string} ciphertext\n   * @returns {Record}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecord(\"record1ciphertext\");\n   */\n  decryptRecord(ciphertext: string) {\n    return this._viewKey.decrypt(ciphertext);\n  }\n\n  /**\n   * Decrypts an array of Records in ciphertext form into plaintext\n   * @param {string[]} ciphertexts\n   * @returns {Record[]}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecords([\"record1ciphertext\", \"record2ciphertext\"]);\n   */\n  decryptRecords(ciphertexts: string[]) {\n    return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n  }\n\n  /**\n   * Determines whether the account owns a ciphertext record\n   * @param {RecordCipherText | string} ciphertext\n   * @returns {boolean}\n   *\n   * @example\n   * // Create a connection to the Aleo network and an account\n   * const connection = new NodeConnection(\"vm.aleo.org/api\");\n   * const account = Account.fromCiphertext(\"ciphertext\", \"password\");\n   *\n   * // Get a record from the network\n   * const record = connection.getBlock(1234);\n   * const recordCipherText = record.transactions[0].execution.transitions[0].id;\n   *\n   * // Check if the account owns the record\n   * if account.ownsRecord(recordCipherText) {\n   *     // Then one can do something like:\n   *     // Decrypt the record and check if it's spent\n   *     // Store the record in a local database\n   *     // Etc.\n   * }\n   */\n  ownsRecordCiphertext(ciphertext: RecordCiphertext | string) {\n    if (typeof ciphertext === 'string') {\n      try {\n        const ciphertextObject = RecordCiphertext.fromString(ciphertext);\n        return ciphertextObject.isOwner(this._viewKey);\n      }\n      catch (e) {\n        return false;\n      }\n    }\n    else {\n      return ciphertext.isOwner(this._viewKey);\n    }\n  }\n\n  /**\n   * Signs a message with the account's private key.\n   * Returns a Signature.\n   *\n   * @param {Uint8Array} message\n   * @returns {Signature}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * account.sign(message);\n   */\n  sign(message: Uint8Array) {\n    return this._privateKey.sign(message);\n  }\n\n  /**\n   * Verifies the Signature on a message.\n   *\n   * @param {Uint8Array} message\n   * @param {Signature} signature\n   * @returns {boolean}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   * account.verify(message, signature);\n   */\n  verify(message: Uint8Array, signature: Signature) {\n    return this._address.verify(message, signature);\n  }\n\n}\n","export async function get(url: URL | string) {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n  TransactionModel,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  account: Account | undefined;\n\n  constructor(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url);\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string | Error> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel | Error> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object | Error> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel | Error> {\n    try {\n      return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, ProgramImports }\n","import { ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, KEY_STORE, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n}\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n            const response = await get(url);\n            const data = await response.arrayBuffer();\n            return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * const AleoProviderParams = new AleoProviderParams(\"https://testnet3.parameters.aleo.org/transfer_private.\");\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\", \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\");\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUrl: string): Promise<VerifyingKey | Error> {\n        switch (verifierUrl) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.bond_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.inclusion.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.join.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.split.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey);\n            default:\n                return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUrl));\n        }\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import { logAndThrow, RecordPlaintext } from \"./index\";\nimport { Account } from \"./account\";\nimport { AleoNetworkClient } from \"./network-client\";\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface RecordSearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * Interface for a record provider. A record provider is used to find records for use in deployment and execution\n * transactions on the Aleo Network. A default implementation is provided by the NetworkRecordProvider class. However,\n * a custom implementation can be provided (say if records are synced locally to a database from the network) by\n * implementing this interface.\n */\ninterface RecordProvider {\n    account: Account\n\n    /**\n     * Find a credits.aleo record with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, its nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const record2 = await recordProvider.findCreditsRecord(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecord(microcredits: number, unspent: boolean,  nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find a list of credit.aleo records with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcreditAmounts A list of separate microcredit amounts to search for (e.g. [5000, 100000])\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext[] | Error>} A list of records with a value greater or equal to the amounts specified if such records exist, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const records = await recordProvider.findCreditsRecords([5000, 5000], true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const nonces = [];\n     * records.forEach(record => { nonces.push(record.nonce()) });\n     * const records2 = await recordProvider.findCreditsRecord(5000, true, nonces);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecords(microcreditAmounts: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n\n    /**\n     * Find an arbitrary record\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     program: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.program = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, \"credits.aleo\", \"credits\");\n     *\n     * const record = await recordProvider.findRecord(true, [], params);\n     */\n    findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find multiple records from arbitrary programs\n     *\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     maxRecords: number;\n     *     programName: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.maxRecords = maxRecords;\n     *         this.programName = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, 2, \"credits.aleo\", \"credits\");\n     * const records = await recordProvider.findRecord(true, [], params);\n     */\n    findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider implements RecordProvider {\n    account: Account;\n    networkClient: AleoNetworkClient;\n    constructor(account: Account, networkClient: AleoNetworkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        let startHeight = 0;\n        let endHeight = 0;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            if (end instanceof Error) {\n                throw logAndThrow(\"Unable to get current block height from the network\")\n            }\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            throw logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findUnspentRecords(startHeight, endHeight, this.account.privateKey(), microcredits, undefined, nonces);\n    }\n\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits: number, unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        const records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        if (!(records instanceof Error) && records.length > 0) {\n            return records[0];\n        }\n        console.error(\"Record not found with error:\", records);\n        return new Error(\"Record not found\");\n    }\n\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Find multiple arbitrary records. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch implements RecordSearchParams {\n    startHeight: number;\n    endHeight: number;\n    constructor(startHeight: number, endHeight: number) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\nexport { BlockHeightSearch, NetworkRecordProvider, RecordProvider, RecordSearchParams};\n","// Experimental example where SDK manages worker\n\nimport { wrap } from \"comlink\";\nimport { WorkerAPI } from './worker';\n\nlet singletonWorker: WorkerAPI | null = null;\n\nconst createAleoWorker = (): WorkerAPI => {\n    if (!singletonWorker) {\n        const worker = new Worker(new URL(\"worker.js\", import.meta.url), {\n            type: \"module\",\n        });\n        singletonWorker = wrap<WorkerAPI>(worker);\n    }\n    return singletonWorker;\n};\n\nexport { createAleoWorker };","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./index\";\nimport {Execution} from \"@aleohq/wasm/dist/crates/aleo_wasm\";\n\n// TODO put this somewhere where it makes more sense\ninterface ExecutionParams {\n    programName?: string;\n    functionName?: string;\n    fee?: number;\n    privateFee?: boolean;\n    recordSearchParams?: any;\n    keySearchParams?: any;\n    feeRecord?: any;\n    provingKey?: any;\n    verifyingKey?: any;\n    privateKey?: any;\n}\ninterface OfflineParams {\n    offlineQuery?: OfflineQuery\n}\ninterface Options {\n    offlineParams?: OfflineParams;\n    executionParams?: ExecutionParams;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        if (!host) {\n            this.host = \"https://api.explorer.aleo.org/v1\";\n            this.networkClient = new AleoNetworkClient(this.host);\n        } else {\n            this.host = host;\n            this.networkClient = new AleoNetworkClient(host);\n        }\n\n        if (!keyProvider) {\n            this.keyProvider = new AleoKeyProvider();\n        } else {\n            this.keyProvider = keyProvider;\n        }\n\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build an execution transaction for later submission to the Aleo network.\n     *\n     * @param {string} programName Program name containing the function to be executed\n     * @param {string} functionName Function name to execute\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string[]} inputs Inputs to the function\n     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for\n     * the execution transaction\n     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys\n     * for the function\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const keySearchParams = { \"cacheKey\": \"hello_hello:hello\" };\n     * const transaction = await programManager.execute(programName, \"hello_hello\", 0.020, [\"5u32\", \"5u32\"], undefined, undefined, undefined, keySearchParams);\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(\n        programName: string,\n        functionName: string,\n        fee: number,\n        privateFee: boolean,\n        inputs: string[],\n        recordSearchParams?: RecordSearchParams,\n        keySearchParams?: KeySearchParams,\n        feeRecord?: string | RecordPlaintext,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        // Ensure the function exists on the network\n        let program;\n        try {\n            program = <string>(await this.networkClient.getProgram(programName));\n        } catch (e) {\n            throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(programName);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Execute an Aleo program on the Aleo network\n     *\n     * @param {string} programName Program name containing the function to be executed\n     * @param {string} functionName Function name to execute\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string[]} inputs Inputs to the function\n     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for\n     * the execution transaction\n     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys\n     * for the function\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const keySearchParams = { \"cacheKey\": \"hello_hello:hello\" };\n     * const tx_id = await programManager.execute(programName, \"hello_hello\", 0.020, [\"5u32\", \"5u32\"], undefined, undefined, undefined, keySearchParams);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async execute(\n        programName: string,\n        functionName: string,\n        fee: number,\n        privateFee: boolean,\n        inputs: string[],\n        recordSearchParams?: RecordSearchParams,\n        keySearchParams?: KeySearchParams,\n        feeRecord?: string | RecordPlaintext,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        const tx = <Transaction>await this.buildExecutionTransaction(programName, functionName, fee, privateFee, inputs, recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@aleohq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<VerifyingKey>keyPair.provingKey(), <ProvingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a staking committee for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 2000000);\n     *\n     * @returns string\n     * @param {string} address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async buildBondPublicTransaction(address: string, amount: number, options: Options = {}) {\n        amount = Math.trunc(amount*1000000);\n\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = executionParams?.fee || 0.86,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                    cacheKey: \"credits.aleo/bond_public\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.buildExecutionTransaction(programName, functionName, fee, privateFee, [address, `${amount.toString()}u64`], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Bond credits to a staking committee\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 2000000);\n     *\n     * @returns string\n     * @param {string} address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(address: string, amount: number, options: Options = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond a specified amount of staked credits to be used later\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.unbondPublic(10);\n     *\n     * @returns string\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {Options} options Options for the execution\n     */\n    async buildUnbondPublicTransaction(amount: number, options: Options = {}): Promise<Transaction | Error> {\n        amount = Math.trunc(amount*1000000);\n\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = executionParams?.fee || 1.3,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                    cacheKey: \"credits.aleo/unbond_public\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return this.buildExecutionTransaction(programName, functionName, fee, privateFee, [`${amount.toString()}u64`], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits to be used later\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.unbondPublic(10);\n     *\n     * @returns string\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {Options} options Options for the execution\n     */\n    async unbondPublic(amount: number, options: Options = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to Claim unbonded credits for later submission. If credits have been unbonded by the account\n     * executing this function, this method will claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic();\n     *\n     * @returns string\n     * @param {Options} options\n     */\n    async buildClaimUnbondPublicTransaction(options: Options = {}): Promise<Transaction | Error> {\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = executionParams?.fee || 2,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                    cacheKey: \"credits.aleo/claim_unbond_public\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.buildExecutionTransaction(programName, functionName, fee, privateFee, [], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic();\n     *\n     * @returns string\n     * @param {Options} options\n     */\n    async claimUnbondPublic(options: Options = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Set Validator State\n     * @returns string\n     * @param {boolean} validator_state\n     * @param options\n     */\n    async setValidatorState(validator_state: boolean, options: Options = {}) {\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                    cacheKey: \"credits.aleo/set_validator_state\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.execute(programName, functionName, fee, privateFee, [validator_state.toString()], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Unbond Delegator As Validator\n     * @returns string\n     * @param {string} address\n     * @param options\n     */\n    async unbondDelegatorAsValidator(address:string, options: Options = {}) {\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_delegator_as_validator\",\n            fee = 1,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.verifier,\n                    cacheKey: \"credits.aleo/unbond_delegator_as_validator\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.execute(programName, functionName, fee, privateFee, [address], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <Execution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","const KEY_STORE = \"https://testnet3.parameters.aleo.org/\";\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: {\n        prover: KEY_STORE + \"bond_public.prover.ff75d2e\",\n        verifier: \"bond_public.verifier.d3cfe73\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqzl9uqqqqqqqqq9stcqqqqqqqqqxa4sqqqqqqqqqyuwqqqqqqqqqpdyqqqqqqqqqqqvqqqqqqqqqqqx9lfqwmck43wt597p8xn68dh8l9setmmtk0ev35tgzkzm3j0j4tgu2s9kdu5w9m7g4dkglj28wayp2njn9qkuygpmcf9j7qc32aafepe5d9tdqyrq9ju2e8mlhkq8tucdh30rxysfl9h7d9jusmjhjcwgpuh0hhlspvtuv98n453apnqceupv2tc26wwx9mjl7m8j0urgax42xzrc9sltd62pfjgnw7vxh36vqxzajv5tyer6hpld0fr75jah48gaqpnexurtrag0azpcpep4lyxeyt4jytug2u7urfrp8rjh5wlkqqz7htzt8fdnthyngd5eqqfc6q0d6zw8lwlyr3hgqkjmkshmw5trm2tqg7euqav6r2vssqm9ut7ecjqq2fqs3k8mjp769qv5r2q52hcre66ymggtva7ty32lqpnrgrhgsc78g7qc00y5z6m626umkhqmz8sp0s4jz6qrvc6s47sycncq6ryltq2tmfxkz22e0g79cy4dzcnu5rwjkl4x3f27gavm7gug50tqnkwqrrjd430j9n8rrg78lpqfye8drxcnd2lxdry9nza8vfg4v3jmnmcdw55pu4kahfrawe4guvaqx26hqxhesqzxe343fjyz7vajn6prhg0jwzjtjh75v5wtp3h2knnvtshzae2uxel720fxg0vyfvnncsnxdqrqjc8aw8avq9kucsvauju4d0ke989s7v55ha0nh3dvdd9rct56pvg87txnhre3qvwmw6acf6t4x5q2al4gwwpqjhsezx6zmth0qeene0v3prwuh8a56r7qafhnyd98f8lx7xv4v48q7q7fd2373ag4fz5pmslx7v5hmpreqrdyj5h6we0kd24wk80f8sq44exsed3egstrn409cwzs9ph8563nh7vy6pcjnqxqrkzqvsa860spwjjf78hyful7zk2l3e9s4u4l0hqdyt547qxz3xamy5gkmd\",\n    },\n    claim_unbond_public: {\n        prover: KEY_STORE + \"claim_unbond_public.prover.4c492b0\",\n        verifier: \"claim_unbond_public.verifier.3793e4c\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8lycqqqqqqqqq02fsqqqqqqqqq849sqqqqqqqqpe26qqqqqqqqqzfnwqqqqqqqqqqvqqqqqqqqqqqgyhv4exh3e2g4f3ek5hymm8ah5h5hdp8v0j52dsksskad9wsryetk3qcr5um8t4nnpnqvhlsk5vcpea7w8uca2pum92jh2has0ag2gq24up0qr7p5z34jzrmtjx2583vkffyywmnatjs5t05x4yyc534cpsutfr4jaxqc9dlmxfw7a5tl4nl9q9qvweaver0q04pfl65w5wuyaadlzjhkkrrjaskg86tmkqy8s8vug7dyjnpe55y5ju8eag63p49ufdyguxdw2fwt46nwer74m3xmv9z6jhgslfwjre4fwctkppytsqrwmlf5szn9ckj2r86sa7azq0ly9atfjeee3f2f3n8s3rkrzezpqmcrt5lv3xlmymgspyj2vn7ytgqj97aula7tuxfrcsk787shhdjyxdvepspp7f4jaxuunzeuw58kdwupfdn8wj89grv5pk5qmxap9xgqxwwf08k98xnkdrp3n4jme0ur5604xp2q9fxlc0aw47vwfcurtsp9nv0rajv4lmune4mx8h39jvkcpv4fnngk3me5d6vds4m5xe6vuqlz55gnzue7fyyt0vzuwsg8f2ztepupry8g32ee48gmj2lldg96qp5xxcjxetgrq8muj4n7w3kv56spy3zhw8xr7ngd4u6l20pk4yvlsamu3y7nr4na246qqnjszlz6jq0922q8dsefkf7cpz8tc0fv4t2uk6y7r8wy5vtmah2y80al3vmc3kma70p4utwf40mc7x33y66zsgq94e09r5mmj5us835tz95w5r8eqz335lz8rac72d4jzxg0c40nmskvl236nz9dysg6uxp80yugx7cqckstk9f79ha0s6k8nftlmqds3za97648k2usw7xnyf9echpy3lsdsaatleyt5w5z2qgqyrxlaxsgq3tytq4qhjrlfz2dz7kuy7dyr0u4q5p78ux8ylh8tcsau46jevm944a798\",\n    },\n    fee_private: {\n        prover: KEY_STORE + \"fee_private.prover.43fab98\",\n        verifier: \"fee_private.verifier.f3dfefc\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8rjvqqqqqqqqq00ycqqqqqqqqqusvszqqqqqqqpnf6qyqqqqqqqqcd6qqqqqqqqqqvqqqqqqqqqqq0plfjy36deglp5xr0lk3rccawpqgztrnjusxnlkc8hz6879me8ty8y7rxzc3qqafadrmvz0v2aluqjwezzwkmj3q9vmr0xgk3arehjhppu7scsw6h4nj08z7fswhyq739ypuh67ff0f0sg8787aq4w80gqrn8e5kduw8h002rkjrw907zqxawqu7qmumx5zayg7k55rdzn05eg5sl8swr7fveuhud3gmf9xjsqzd9x9az5ls4s8cwjgc5lmvkhphy67q0g7qwzee7hyavg335j25mllnywrtjcwfejt55qxag7wvggqtmtc3al0gy6q83hql4wagk37e200592az7n525s80c4xwr92jr8dt40t3fyjxzszrc9umk95psswq82kkg25sh25s3mw5z3xt9qy2ftm8ec4a8l8rwfuxfujjrxxnhmrqs4wsunec3ukd4mur4fkj8enqqqv9n37e5fyag7e33rxsyp63u5rfs8hn26slsmdaqzvp2flcz506r0hqncdtt07nhulltlh5wyq4gpxsln5td2v0treu7t8wanhq6yv8hswxla7cf3w8nv4p233gz0ry9n7sj2uduredwtykw2ec3fs8fqrjkz8agg2xj8t9wden6spzdfcl7jlw4rgzv4hjqvh4cw40yhh8udv5g6vd0jhhfmqevezq0zs4x2q2m7u0hq9mkvulj950t9a5tcm6suycdlaky8t568jevkn3tf9uu5laevjumvahk4cxjxam85kq0l5qrycnmdzgvm7hr8cvl8a7qzcmjkwh48krtxtduhcfn7hvt752slm0nvth0yf35jugxg7ah2kw5emcq4mk962eypxyvwahf4k5ql8376l5za4zvv2p7jzgkjjs4lc60nv3czmdmmc0qn5mwnlnaxmwazs3qzfea0z0sn3nflp8v2lwlczljxre975fnvw3vfyrrjze4wuxtkjg7j37fph\",\n    },\n    fee_public: {\n        prover: KEY_STORE + \"fee_public.prover.634f153\",\n        verifier: \"fee_public.verifier.09eeb4f\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrcxyqqqqqqqqq8yvgqqqqqqqqqndesqqqqqqqqpg56qqqqqqqqqqhyyqqqqqqqqqqvqqqqqqqqqqq9a3p0z8q2qzsgq6lsd3zeh3tvezv0d2wg9tykutk9s7dat8uyamgxv54vv5le5slhta92cs08905qy0mgfdx0r7hzc7ec4qn8wmkx2cvtrwggad5h898kkp20eheukemkhj6g37flhpmxq9hpk9q2kfcsr58ufzupqpgfthzxsrn0554ttqckrgfwjfnvpfqhy4evahxkzahkf85pqt0es3j5jc2kzpkcu4ausrm4k53evjtuy3tzc3jgwl7y5t79j0ddhprs6ls9x0qpvqggvkffjg0psvjrmf2rsw5xrdnmqxlx5qru82dsavaka5kfsvxgyrzdf4tzceghyeqpk55308pkc0sg63sgwt8fywksccjdkkrqkh00kgraeuq97zsydp9z6pagtqmaply94dacmk7qkgg5jt36exjxcjdckjgswc5agg9xd4lqmpxxmtur7d7ecvvpg5rg4mzlf65hlpeynczqwdgrdekx7m3n4ljumgezxyzq7h9wmnrqfawayl5gns8gv2jaucwc9qmcq7pj6kvddw8dgpdf0rh66a6erzj9fmupu8ulc2x64092k5sfdm6rlaktdv8fscn8wlct0p9xahl2qqnxsw3tfzms5xplll4xamrlhtjm2xfsqmx62er2lmmzn6wk8788hcpg7uetlrufwlvmapeh00h9aqql6ggsknvwt45wjmfkky7z5ukly3dpjqvqt3yl839d8flcx6kpf5vqvdm57kqdwjazcmfn4ae87yqg08dlw805prfrfjvlyff3kq09z2yxc0pcaqalj7r4e6lygruk2ezpkfjlslyjtek6rtgvfwavqa5pmp6jgmr8xzu5dk0lcmfgm0plw8jkwt60pz2scpuh78k7f4dlfp7grjpn3xtdphhsn0k8rpfwqq3qr6huef2asc990ragxknla7kdl76xr2g2vl8pnql3f58wgcptked7rgeah8\",\n    },\n    inclusion: {\n        prover: KEY_STORE + \"inclusion.prover.cd85cc5\",\n        verifier: \"inclusion.verifier.e6f3add\",\n        verifyingKey:\n            \"verifier1qyyqqqqqqqqqqqzq7qqsqqqqqqq0huqpqqqqqqqqjvksgqqqqqqqqnypqgqqqqqqqzk8sqcqqqqqqqqvqqqqqqqqqqqxsh33gk03qelqrvy0g5m2km5vfhs6flwsutadvdl3nd82a3xqunx8pgaccs2yh654tpnanywulgvpvfxuma59ufttju8mvnpmuhg720p6fawv4ynhe75vfhn3te00saqpd5kpgxw59gf4r3ng3z0hr49gpwlwgkac7zlqk7cne5xh33m96qep9xeu2nf68dye57yqrnqgtaa2vk3ldcpurjn3s4pavzde8cehsrqn57qm2ewew3t4g6css5qzgfywdkkrx0rmz5u68cxvrwaksjd4s2exerl3u7cae58tc383yzd5tqxk66xqldl3ch8ymq73jhufwfcp4r8vcynmjenzt355a3qnejfndw7v5sn9a63wrd86rczgrp8wsuqsth7346q3qgaddsj6ln92233jjvke2krn809qvt8ev940hfclr5etza54055m8upn5jhg224v27cqamjy5lv3qm5nyc9asy0tqz0xsgmkuyp75t2qgv3h9s4av3u5tpmf8qkf7k7gp8rjlf67uncphscspvlmku59mgn4cqlxqqz3qdsyycs2my3emuyj9vnzt0464rfgnnmxwnw4kkqe50f764fjauj73kqcsxzn5mecv507xnetxvhfkt79r6hfvf6nzl735xtfp4r7uxlns3dazwj9mgl4fayzv0nqprh80ydqtq9tl6ffcmav2mlsky8tdrunewu3z8a2qg5wfhxz4j0xsqzfsr50ts63g0wysvnkt4rd6equa0r6fsqhrsjft0qy4jnstawrmnj28llqfgemj868y6aaw5rjftgp5vezg7r2c4q5zeupt4gghwand0jeyv5qfnxtnzh7wflxh7tdd0q6zh2fy635xhmllux8hk946t3kzenmc0355mz309gfachp2verz2qaepxsrj63nr54uga9eh2xcgp85v90dellhsvyx73m2w2qyed52svs62ysg7e3ag\",\n    },\n    join: {\n        prover: KEY_STORE + \"join.prover.1a76fe8\",\n        verifier: \"join.verifier.4f1701b\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqz2cvqqqqqqqqqx0scqqqqqqqqqc42qzqqqqqqqpvmfqyqqqqqqqquzwqgqqqqqqqqvqqqqqqqqqqqpz6knqjfm77py0mpx68rmc6yavzrjpn3vdn5rmhum6u47fxt3j7auv5mk8epjx0hsa7nfm4llzwqqj84x9cnerm5gach0nzfy0jsvfrylvld5ffe8g63nhw5qng68rs6yrlzrc5229ezc8j4n4y0f2hrqqmdphh3mpglur7evq52n6mx9nls064fpn8wr3vqz75vextjhjmpvcrgs8har5txjnh9tj8lmlusns8nklkw8dh8nc8sv0llh4cgw95l3m7mwugu5nfrrlmyccnmrues4wl0hdfwsq8wvn60y2hl036g3aqzh5cn6n2366fy4hawjn22mj86w2w7twq80pdrea6svl7uq5zyh9nz4qgd72tql95n2xx0zh3wcjyqca5wzv4276exszaunpjduuvjmture49av40ve03akc9qw709wuf9a8hhpwlwwz8acf2z5ngk2d95qzfqhkmllqx4lnupyevkn8zthgu54x55t4cqm7uvmmnu3vtvkmsr4tldemm26shwk8ux27v6lmxkqppuesjj5d3m7x5rsg7yn8cg6hkat6fy8u8zj3n0z26ehqvmq8x2fadtw5jt6pxxfp3cm40ak7x9yqym5qrwjzpr7xwr4t6pjn5ca9g02hnuyvxd9jqpv70a7w05mqatnyzhnfl462xmsehgcwczjkrzz2qxk3wa0elrnvnh9qlz3cc2g8xyag9yrds0jepsvskl55zqtntp6qvkj9nkmlercd95j8g9xdgxv0sq0y6gq32ng5r9zcs4wt3vryhldxtr9epyz5vnnx4mf2lhv4r56mftaugjemxezpjcv9enr259tf7qq66a7ngsc3y0a5jlm8jg2rnd9c38ny2m5egl7ssx62zcscztkmjqpkvta2za4ym5jkatgzd2zspfcrc7gesjxjgcvhsua3jpyzpdan6mestyqsx5eatkmzv9zmpwkur3c34sjzc\",\n    },\n    split: {\n        prover: KEY_STORE + \"split.prover.e6d12b9\",\n        verifier: \"split.verifier.2f9733d\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqpehuqqqqqqqqq930cqqqqqqqqq295qzqqqqqqqqyyyqyqqqqqqqzjjvqgqqqqqqqqvqqqqqqqqqqqyjhdhawnd33kv88ehql385slkd7lyr46jnf7yathmnxnr7at2j6u4nfkkvryujwt8rvhdfpuw94qq8e7sp33sjtyz53q89k85ttcg2cvadvuadeuq5xn4hgkmvm3qj93er0t2pjpd2p4kd3zy2gqmqd5qpfzdk973253ufzafqwd9879c7wpdv500a4xhetxkareamyl2qqzdd5hxl94vnmrkluzx0te32rkusqs20xswldqdgekfh6p25yxjhls20k59lsfn9az8jak9lr6r745ujsq0jq9fvugqyqchuca8xq6stq0svvu7e4xguc84t3s72erg4ve2z3nsr3jqv6jtala9j3xf5msksupprwwxkwwl58pv2hmr4g5h4xqym3nj6ax7ujx70np7egc4nw0w3j02m34eq00gssjq0pf9xfltxtef29crye3sul45kkawnrl6uzvquszlgltwtgx2xjlehgh0xpdm68dyjev9qxsleetpc33mns5jakrmqqryk8qgmnc56dzgcwm99eccq6c93576s946jztmuvgp8522y00jpck54wlcg3me44sk8usehsnjgm85zmypjsf7nlp06na927dtqp7u45jnd3em0n9h0wgtgvwh7lyhq4guwdfxws8mswwzfr5fjdtv0smjeq3r58v03amrhgr2ex4h7q8wapp8h5ug8vh0fxkt6yp3l2mas3l0jmmpedy9vx4lnxmjwn8t4wxyrdnnr54jxmp0wyu3sf6wwkqa6r2g2u9qu5km92fjnckme07mrxghuxh9ktpj9cvaf08sccdtdwjsnkyt9qu2x5ft27tkrskudrqpyr63x640xlk9wqpmy3edx58wxwzesmx22v62y6lshjv3wur83jlmwm74qqpd34ewmrk7eg0jfp7cretx5jwfv5c904v9qazfyluh5fpdczgx9fluayuukfwnqjq8tdwx3shuy5\",\n    },\n    transfer_private: {\n        prover: KEY_STORE + \"transfer_private.prover.2b487c0\",\n        verifier: \"transfer_private.verifier.3a3cbba\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqqvccqqqqqqqqqz43sqqqqqqqqq7jqqzqqqqqqqpj4vqyqqqqqqqq0zuqgqqqqqqqqvqqqqqqqqqqqyvnz4pl9kjr0ks3dtkz67gw8tyqzs3sxskt8xg6keqrrqk9nj3e39kg65lzz5sd5tug2ecrpmfg5peseqmv709nry8up96qwsuvpp8684njpe4qunfhf7ywc0a7lck9rdlfcred8krn60lgztx4wlrlmspnnkwe9gmqk07tt5lj3wxcpucpshz7ec6w5mqvspprmu88lr9tr9e7a9fqdye0jdajq46pt35hdjsruamruf6v73fu68hv5fcsndmfq3c65yjrmljfg3343vj8cca2js2gumrks9eepm3d7g02jw0se9eqpaj86kpscxu4vuvw7jedgt2c0l4fk5zqwdu3vfhrazjwedl5d0n9w75ky0924qjjzg3c04dw7p8uqxqnuph6d3d935zqavxtte336jmnpk0hkjn80cejqfljl7w6jtnl3tedhtdk4cx207c7lud9xagzcp760x47h3hrw68syru4rnr3zgy99wcpnglpjvndzrjpc3z8c53xyqx0jh8cnt6gn92fgqu8a5huespxgnckqgttq8aa7xngxt9f5lpq2zgakfhtfvhlcy66k3depln3x67ck2m9t0fvnetjygj6h2er2fqqwcf2ghjp5fvq4e68635ql0lv5uv4c82575dcv87a0y8745g6gvjenh49zppsekc82dect9ggp3aqxqnc73dmd38pe4x7v9wwv6namfe7337tczyfz47dyxxzy8fslktv47yn8r87n0nap5qlc9gzgd2yq8m6zj0ulzgaqls2dq2atkfzxu5rjguvcjxnmn7hr8uxgxuzrwtmcftz4emn24vpq5pcwxf29a7w5p80e7f2tv7ags5k0pj9fghaklzm5xrakpsk3gv4xzvzqj6u2denjw60q777r5889xqrvchhtac4xspue4mncvgerscq4dslzkt4mg4zuv6t6gahcvnm2p6r02ns62xsdexs8jxt\",\n    },\n    transfer_private_to_public: {\n        prover: KEY_STORE + \"transfer_private_to_public.prover.1ff64cb\",\n        verifier: \"transfer_private_to_public.verifier.d5b60de\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrwjvqqqqqqqqqgpycqqqqqqqqquvvqzqqqqqqqqceuqyqqqqqqqqyd6qqqqqqqqqqvqqqqqqqqqqqr8z97pzqh2lxcc4tasdu784svuk6lv62sj78flptnzqks3hyu42ymryngdzr2mw6j4nxm4cmx8tgqnfzdkccekds6nhs4c7t2hf84d38jkuufdrf43ls4zm9htqarx9mv3gswcxp74kelgy36yhpsrfkgzdr8vy8580sulvaw36pxjjv0j543rml679z305kt2ju3wzarmsukzkfp56qnc0pjuptzajkes95uspd0uz3fd9fu5vmxwfwq9cj5qh0yjq398h729yygdm0fzkrl9g6faevalks3yc7xl3le38k77t3exqqnn82yyjpunpn763s8hkaguvn67jehqcvt8tvhql8skpesm9tm2hgeryk934h8c8cdcgynjq5cj2qer7kkjc2rrmg5j6agac0ya88up0sl2skxsvkw0rgxlgxjtjqc4g8c3xssq2sk6e2dufvc480rj8vqcrhtqsjqdkzq3nanlvngrjxchnzwfywwjphj5jeza2lyynrk5awz8v6jtwgxu2fs6uqrykz5lz6qpt2dfs670clhjpagxny40nmgeqtf9w8hu4v7yjpgwpv89v05u2ahdryu4538augkjhdx3hvfahwuszd8zyqmcxhrcq039hcrkd5qgadhj257vvrf27dwu64kl0j237efzvt5d360umxw3xk6tej5cxv9zqxqzc7ryqndhttaw5act9kwt8kvxtdjnzy99q8gzmg2429f94h6csrqejzc4n40xjcsdwn98hdekyqzytrh35w6t3r5d86kqt897kv5mldx9w06h4rldk734hvn096gt7e4smleja7canyfpv798cksshgq7hkyt6elvzp3rpj9nd84ykt9lzgjsswn4y8934ay3575u3sx7mkeuca0zsere2q0jmlsl6w6v2qcq424uhnmqn9q5vw22jgy94pry2junps40ug867d79h2zvd0n02nmlz05hd\",\n    },\n    transfer_public: {\n        prover: KEY_STORE + \"transfer_public.prover.a74565e\",\n        verifier: \"transfer_public.verifier.a4c2906\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqq79uqqqqqqqqqp2tcqqqqqqqqqwd4qqqqqqqqqp5ydqqqqqqqqqqvyqqqqqqqqqqqvqqqqqqqqqqqre7drur40rst43dq9at346py7hkmrhexarf59f2tjt4stlsdj5uwrgnrkjjej7jf3djk2w4njtxcq0mezac793craujm8mr7wutcqtu2aday5g03wl0cu2572fsrtpyjhdyqlh0447z7dshlkhksjsusgp4ezrvc0n64fwetfmml3kvfg7n03w2e602sl7et4cpw98hgpzxwzrmzu8r3x77v49njysy2lp55xsqh6t5qjvhyl5a7nzy3e73y7dzvvs9p450u0s8g84prqnrk6jeah89c6882uzqdvxgzcedfmsc43uq99n3ycrjh70ys8n02pyvdvzmu7z608desdd5yw9dc8v3ddrdddmrzz2pupe09yn9esy25cfzmd0wqcgjdxm4dvlt2t6k66lw8e9ccj49qj2ahpht62kh7p56xpvpekenq2arng2t55mwxe59mqpkp6a0yqlwt7tdf98rt3kqlr9tdtq6hua3wrka0mqzhva4nhucxn9u4w92mly69jy2c7cqm5ftnk3m0qxy9spaxwfz0xkqd947yvf2zh8h4y59fltxdpeu4utpv9zw0cr7ad9d462qxyc2f05lezw6dwhcmep942qqv38lp3x9efestt5pk8rplvmrk0zz9zel48l8h9ldfzyd8zyr7knze92cdyanez6k7q5fu6tnw9wqrywjnhevaujz20xn0h3n47g85zs6ejfh7z8jt9qjesqgmdymvcxlceudkdsl49t5r69c4mg7hfwyq88z7zn0efda8fdjmhz8aaq24q34g2ekdzr5w9em3cev2ktxtmupqwltu0nh3fjzm04cy3cgnqlnqq0chzq4rs2dmfjwryxrxxgjtdcsnn9fpwykkxwfuervtznu3lmvhhpdflgwgm0xklu6c0xsxt9dfcp29w2nz6zkjetz7cqremg68eqxq86rn082czp50ldw9qkq6w3p9xxg4hrg\",\n    },\n    transfer_public_to_private: {\n        prover: KEY_STORE + \"transfer_public_to_private.prover.1bcddf9\",\n        verifier: \"transfer_public_to_private.verifier.b094554\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrhvqqqqqqqqqq8kcqqqqqqqqqqu0xsqqqqqqqqqw0kqqqqqqqqqreg7qqqqqqqqqqvqqqqqqqqqqqta360tn6dhv5z559ejfahwq88lxtd498py5p3vw5u3rwtfvdzpxq7fuqdahsrennq80g8yc6wqjyq8ahdv3jzry0mxceed0jr2cd0wye3e7782pg3phsu8h7hcapfgdghcgg2ykfc2682xefhsp3plqnqp692097k4ja82ecc2descl4d6csug04cz2j9a5pk3djx6xde2ghgq7uqvuhsg47ksueeetvc7mh2qpvqjmph9eekp5waqunkeea9vkvzyl8culmn5t7l9ke3r7uz8v5r8njjdkug6va9vy6axx9aq2kxaqdd9ll2m3j7qg7eyq3k2pnhq7gx2kv8vm3yf5pyqtywt2hvur5uv45y5st53qh970dktd3k709d9sqwv0d6qaksxjcp2cxu282hcewhy66vfs5kp35e6k4shdmjzmglyqqcsnupv8xwdr3596qypzshnuuq8rpm8pyjwtws63wsazqt8tlqhkkxucf0zjc384wvv2jemdnjwd6hn9745h8qc4kqp0rzs9wkx0hcp22xzuyyk7gpsc9ahw7pdenpje3etp37lfrcuntehl8wm2eudrh0j04szjzrv0n3r2gv04mgau5ysqtdcddq44xtt6t6f08c9zuhqukk8zy75jru0exufnh74u97d4xwe005ug7ywmcnyz8u6nvdav2xxqqzpg0luhghl8xu7g0cjgxse0lnqqedc7cc47nc048h2t44gedjq7f49ghajc9gwclp962v4q2855qvgdtkmr29cpwwq8vghlcjv0g6k0a0xa8yrmmnd5l7umnuqcd4x9rcejc3mkjgpw8y6mue2n5tx9cpahnw37yey5k38j98dnr9jss00420jvk7nh59hul7ef69n8ktcltl8f0t93rya5y8d2cspyjp6c7crvg2d4m37z78dualsqr9u7vtge07psdtl4l9785fxl3wgf9u277puvgvuq\",\n    },\n    unbond_public: {\n        prover: KEY_STORE + \"unbond_public.prover.78b2191\",\n        verifier: \"unbond_public.verifier.96c3590\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqp89yqqqqqqqqqp62gqqqqqqqqq892qqqqqqqqqqym2qqqqqqqqqparjqqqqqqqqqqvqqqqqqqqqqqp9uker5608hsejeh46lk307z2ewatecukttkp7elhurugmwqay3ypevdjjt6ly68e9eyt2cnx7dcqrrf24kwmmy5ptlpyy72r5ul2lynras4lluy7ke6spzjx97m2qvjy3jhsdk8tpkwj3vqf37hcncjcqm5mrvp4v8txatw8hhtrklu0pjgx9p39jvvjxsqghf8rxm8edyacw3h8g7mqz8u8acay65tskf42qz5sqfvpfvg9ycnw3mp7jqnv80dnmev9k788aycnx9ufa09qfzjnxwnr6503ckc8465welwq7vxqlqyuezzshvq3gfpvdnqgrsda7kv88sq7nqpttlyqczrmsf6xln80ejcwshagevykxjc09numhdc4r7qlme5zlrjru7lyexcxq75qvtpqhkkz0zmfmm9paddlrk88xcctmhdun6rt0rzkdxx0fdgughvxlmyq32ct8s0k0qlf3rwlggvhvsw4ekl683ls9la7lcga87ereutr34fke6qzdkxz94rqzrl2msyhax9grx2t5jtkfenxsudq6mfjv0uhtxycalyk2k6c4hwdq5z33x4kcgns2tsx5hstvv6pp9phv0cedf4ysqgavdjlnx2g4tvw9wmmz7ghmm03jkutq568pxx7ahp7kjfe9ta2eas7qkj2r4ue0pwa5ft9k88r5qw32mymhz4p3cpg5g5v0z6kkukh9zxjzsdqnvglsdtj64u4dtu2epnnuckz3fgqw4mrn54nvvwv8zquwsz9jqp4zrux2xghqk6fh4y29vm3aq4v6kh4zmnwhuf0y249grf8u7xc6cu3rrz5ugpnzvawpyypmfnl58xgm0gq8m8zsn7uw436hhjwewyhwkva6trxdfxfr7rpn2qdu2yp2ulu7ezpr0meet8ht3zsqjyezyylcgrjttgphl0t2ckte6jwm6la7mlhz7ya8rancl44m9dpy798f9\",\n    },\n    set_validator_state: {\n        prover: KEY_STORE + \"set_validator_state.prover.5ce19be\",\n        verifier: \"set_validator_state.verifier.730d95b\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqpehuqqqqqqqqq930cqqqqqqqqq295qzqqqqqqqqyyyqyqqqqqqqzjjvqgqqqqqqqqvqqqqqqqqqqqyjhdhawnd33kv88ehql385slkd7lyr46jnf7yathmnxnr7at2j6u4nfkkvryujwt8rvhdfpuw94qq8e7sp33sjtyz53q89k85ttcg2cvadvuadeuq5xn4hgkmvm3qj93er0t2pjpd2p4kd3zy2gqmqd5qpfzdk973253ufzafqwd9879c7wpdv500a4xhetxkareamyl2qqzdd5hxl94vnmrkluzx0te32rkusqs20xswldqdgekfh6p25yxjhls20k59lsfn9az8jak9lr6r745ujsq0jq9fvugqyqchuca8xq6stq0svvu7e4xguc84t3s72erg4ve2z3nsr3jqv6jtala9j3xf5msksupprwwxkwwl58pv2hmr4g5h4xqym3nj6ax7ujx70np7egc4nw0w3j02m34eq00gssjq0pf9xfltxtef29crye3sul45kkawnrl6uzvquszlgltwtgx2xjlehgh0xpdm68dyjev9qxsleetpc33mns5jakrmqqryk8qgmnc56dzgcwm99eccq6c93576s946jztmuvgp8522y00jpck54wlcg3me44sk8usehsnjgm85zmypjsf7nlp06na927dtqp7u45jnd3em0n9h0wgtgvwh7lyhq4guwdfxws8mswwzfr5fjdtv0smjeq3r58v03amrhgr2ex4h7q8wapp8h5ug8vh0fxkt6yp3l2mas3l0jmmpedy9vx4lnxmjwn8t4wxyrdnnr54jxmp0wyu3sf6wwkqa6r2g2u9qu5km92fjnckme07mrxghuxh9ktpj9cvaf08sccdtdwjsnkyt9qu2x5ft27tkrskudrqpyr63x640xlk9wqpmy3edx58wxwzesmx22v62y6lshjv3wur83jlmwm74qqpd34ewmrk7eg0jfp7cretx5jwfv5c904v9qazfyluh5fpdczgx9fluayuukfwnqjq8tdwx3shuy5\"\n    },\n    unbond_delegator_as_validator: {\n        prover: KEY_STORE + \"unbond_delegator_as_validator.prover.115a86b\",\n        verifier: \"unbond_delegator_as_validator.verifier.9585609\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8c9gqqqqqqqqqw72sqqqqqqqqqlfvqqqqqqqqqp2t0qqqqqqqqqqencqqqqqqqqqqvqqqqqqqqqqq0grv3rvp00lpr8rd0gvrlzmxfldeur8rd0rh2amsut4350grudguqrf59q2x4y9mvh27dptpllesqacgeq7er0s9xjrt87q9hqt8ntaxjycfmdxf5xqm749xegmh7vzx6d6pzmzesmhtlue58gapec39sp545htqgeff2a4ahtm8xlswh8yhwqax83yexvuwxfxrnjkueszuha2v8txhyzcg0umtgrqmg5gd2szf44v65920m8dmazcjpllt66l526k6khzsg3eunzqwtd3f9afp5lkaaey7dmltvwzkslm5x54gfcqtf2ma4uej82juvpnxz2e5u3n7a7e3668e42djfjewc5d6h5w7jrz8fmzw56u0nnujy48a0csta3vqz7zux0a3enz27y76zkm5wpppnaq69498k0n9dexftjt52ddtmh2nq34p8m2mt9n68drv2ndm7v75q6dwx5675ycapv7x45vvfhyywg0pq2hvk44mc0ry4czvemt8t7ayfnnksupl20rvmsmqrngaf8gyqza4pytae47wr8mv3r90qmesguclvxvdp7wz3ygyv4rxu0vhjf9lmmymyjcf64ampvtup3x5fst6cq8mgel7t9czxsfx53a35mpfmgdpr8hk3cj798y0fa8zf4a8cw9qu2xsp37vhnkwl25pjfy6lu7h6lqxj8dez7k8g4km3yfxnqjhvyh6279r92a6rdg2j9spuhrq2dyadxygytnc9jqxfh3jtaxzydtz57gqg564f43m5hlswpel98zlnz8lc5740srsd96fv5k0aqhku8xd0q6myj77h7m4n0we5mcxa24zt0rspl8602e3adu06j3h9e9tz8sdw5s005aw0e8y4mmhv3u5swhfl5yv4aarj45j5pg57htp42s80c3hcpzghmmnan73lw0lkjfgxff2989yhu2n0qakdvdqvelz473mhwlrlad3y5f\"\n    },\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"public\",\n    \"transferPublic\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@aleohq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    TransactionModel,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n"],"names":["WasmProgramManager"],"mappings":"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"}